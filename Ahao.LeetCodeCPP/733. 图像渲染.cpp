#include<vector>

using namespace std;



/*
733. 图像渲染
有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0
到 65535 之间。

给你一个坐标 (sr, sc) 表示图像渲染开始的像素值（行 ，列）
和一个新的颜色值 newColor，让你重新上色这幅图像。

为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向
上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素
点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。
将所有有记录的像素点的颜色值改为新的颜色值。
最后返回经过上色渲染后的图像。
*/
class Solution {
public:
	vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
		if (image.empty() || image[0].empty()) return image;
		//四个方向
		int dx[4] = { -1,0,1,0 }, dy[4] = { 0,1,0,-1 };
		int oldColor = image[sr][sc];
		if (oldColor == newColor) return image;
		image[sr][sc] = newColor;
		for (int i = 0; i < 4; i++) {
			int x = sr + dx[i], y = sc + dy[i];
			if (x >= 0 && x < image.size() && y >= 0 && y < image[0].size() && image[x][y] == oldColor) {
				floodFill(image, x, y, newColor);
			}
		}
		return image;
	}
};